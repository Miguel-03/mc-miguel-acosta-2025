# -*- coding: utf-8 -*-
"""TALLER9MC

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iEcASrnBTmZKKbqJFlDFEbonT7RZkAgv
"""

def to_floating_point(num, mantisa_digits=7, exponent_digits=4):

    if num == 0:
        return f"0.0000000 x 10^0000"

    sign = -1 if num < 0 else 1
    num = abs(num)


    exponent = int(f"{num:.0e}".split('e')[1])
    mantisa = num / (10 ** exponent)


    mantisa = round(mantisa, mantisa_digits - 1)
    exponent = f"{exponent:0{exponent_digits}}"


    return f"{sign * mantisa:.{mantisa_digits - 1}f} x 10^{exponent}"




num1_a = 68327.54
num2_a = 0.007988
result_a = num1_a + num2_a
result_a_fp = to_floating_point(result_a)


num1_b = 748.067
num2_b = 41.322006
result_b = num1_b - num2_b
result_b_fp = to_floating_point(result_b)


num1_c = 0.40172
num2_c = 0.00011109
result_c = num1_c * num2_c
result_c_fp = to_floating_point(result_c)


num1_d = 29.95091
num2_d = 0.000110793
result_d = num1_d / num2_d
result_d_fp = to_floating_point(result_d)


print(f"a) 68.327,54 + 0,007988 = {result_a_fp}")
print(f"b) 748,067 - 41.322,006 = {result_b_fp}")
print(f"c) 0,40172 * 0,00011109 = {result_c_fp}")
print(f"d) 29,95091 / 0,000110793 = {result_d_fp}")