# -*- coding: utf-8 -*-
"""TALLER25

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tpj1uOhtqiRjY6jeCTAz7eyeGkZIuUXi
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d


x_data = np.array([0, 1, 2, 3, 4, 5])
f_values = np.array([0, 5, 2.5, 4, -1.6, 2])

def polynomial_interpolation(x_data, f_values):
    def basis_polynomial(k, x_val):
        result = 1
        for i in range(len(x_data)):
            if i != k:
                result *= (x_val - x_data[i]) / (x_data[k] - x_data[i])
        return result

    def interpolated_polynomial(x_val):
        result = 0
        for k in range(len(x_data)):
            result += f_values[k] * basis_polynomial(k, x_val)
        return result

    return interpolated_polynomial

interpolated_poly = polynomial_interpolation(x_data, f_values)


cubic_interpolator = interp1d(x_data, f_values, kind='cubic')


x_points = np.linspace(min(x_data), max(x_data), 100)
lagrange_results = interpolated_poly(x_points)
cubic_results = cubic_interpolator(x_points)


lagrange_prediction = interpolated_poly(3.55)
cubic_prediction = cubic_interpolator(3.55)


plt.figure(figsize=(10, 5))
plt.plot(x_points, lagrange_results, label='Polinomio de Lagrange', color='blue')
plt.plot(x_points, cubic_results, label='Interpolación Cúbica', color='orange')
plt.scatter(x_data, f_values, color='red', label='Datos Originales', zorder=5)
plt.axvline(3.55, color='green', linestyle='--', label='x = 3.55')
plt.axhline(lagrange_prediction, color='blue', linestyle='--', label='Estimación Lagrange')
plt.axhline(cubic_prediction, color='orange', linestyle='--', label='Estimación Cúbica')

plt.title('Interpolación Lagrange y Trazadores Cúbicos')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.grid()
plt.show()


print(f'Valor estimado de f(3.55) usando Lagrange: {lagrange_prediction}')
print(f'Valor estimado de f(3.55) usando Trazadores Cúbicos: {cubic_prediction}')