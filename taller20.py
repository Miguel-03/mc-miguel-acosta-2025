# -*- coding: utf-8 -*-
"""TALLER20

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-YbxKgyHdKKhZ_4Wy7xndvgF6kgkVReK
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

# Datos del taller
x = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=float)
y = np.array([4.5, 6.5, 7.5, 8, 8.4, 8.8, 9, 9.3], dtype=float)

# Función para ajustar un modelo lineal y calcular R2
def ajustar_modelo(x, y, modelo="lineal"):
    if modelo == "lineal":
        X = x.reshape(-1, 1)
        Y = y
    elif modelo == "exponencial":
        X = x.reshape(-1, 1)
        Y = np.log(y)
    elif modelo == "potencias":
        X = np.log(x).reshape(-1, 1)
        Y = np.log(y)
    elif modelo == "logaritmico":
        X = np.log(x).reshape(-1, 1)
        Y = y
    else:
        raise ValueError("Modelo no reconocido.")

    reg = LinearRegression()
    reg.fit(X, Y)

    # Predicción según modelo
    if modelo == "lineal":
        y_pred = reg.predict(X)
    elif modelo == "exponencial":
        y_pred = np.exp(reg.predict(X))
    elif modelo == "potencias":
        y_pred = np.exp(reg.predict(X))
    elif modelo == "logaritmico":
        y_pred = reg.predict(X)

    r2 = r2_score(y, y_pred)

    print(f"Modelo {modelo.capitalize()}: R² = {r2:.4f}")

    # Graficar
    plt.plot(x, y_pred, label=f'{modelo.capitalize()} (R²={r2:.3f})')
    return r2

# Gráfica base
plt.scatter(x, y, color='black', label='Datos')

# Aplicar todos los modelos
r2_lineal = ajustar_modelo(x, y, "lineal")
r2_exponencial = ajustar_modelo(x, y, "exponencial")
r2_potencias = ajustar_modelo(x, y, "potencias")
r2_logaritmico = ajustar_modelo(x, y, "logaritmico")

plt.xlabel("x")
plt.ylabel("y")
plt.title("Ajuste de Modelos y Coeficientes de Determinación")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()