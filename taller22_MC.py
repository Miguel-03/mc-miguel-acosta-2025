# -*- coding: utf-8 -*-
"""TALLER22

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H-uyyJkgCzexHIIvPvTCkrzRXISezs04
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

# Datos de la tabla
x1 = np.array([1, 1, 2, 3, -1.5, 2, 3, 3])
x2 = np.array([0, 0.5, 0.5, 1, -1.2, 1.5, 1.5, 0.5])
y = np.array([0.2, 3, -0.8, -0.4, 3.5, 3.6, 0.5, -1])

# Reorganizamos los datos para regresión
X = np.column_stack((x1, x2))

# Modelo de regresión lineal
model = LinearRegression()
model.fit(X, y)

# Predicción
y_pred = model.predict(X)

# Coeficientes
coef = model.coef_
intercept = model.intercept_
r2 = r2_score(y, y_pred)
corr_coef = np.corrcoef(y, y_pred)[0, 1]

print("Coeficientes:")
print(f"  x1: {coef[0]:.4f}")
print(f"  x2: {coef[1]:.4f}")
print(f"Intercepto: {intercept:.4f}")
print(f"R² (coef. de determinación): {r2:.4f}")
print(f"Coeficiente de correlación: {corr_coef:.4f}")

# Gráfica 3D
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

# Puntos reales
ax.scatter(x1, x2, y, color='blue', label='Datos reales')

# Plano de regresión
x1_grid, x2_grid = np.meshgrid(
    np.linspace(min(x1), max(x1), 10),
    np.linspace(min(x2), max(x2), 10)
)
y_grid = model.intercept_ + coef[0]*x1_grid + coef[1]*x2_grid

ax.plot_surface(x1_grid, x2_grid, y_grid, color='red', alpha=0.5, label='Plano ajustado')

ax.set_xlabel('x1')
ax.set_ylabel('x2')
ax.set_zlabel('y')
ax.set_title('Ajuste lineal múltiple')
plt.legend()
plt.tight_layout()
plt.show()